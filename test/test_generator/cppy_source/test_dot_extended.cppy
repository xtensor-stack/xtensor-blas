/***************************************************************************
* Copyright (c) Wolf Vollprecht, Johan Mabille and Sylvain Corlay          *
* Copyright (c) QuantStack                                                 *
*                                                                          *
* Distributed under the terms of the BSD 3-Clause License.                 *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/

#include <algorithm>

#include "gtest/gtest.h"
#include "xtensor/containers/xarray.hpp"
#include "xtensor/containers/xtensor.hpp"

#include "xtensor-blas/xlinalg.hpp"

namespace xt
{
    using namespace xt::placeholders;

    /*py
    a = np.random.random((2, 3, 5))
    b = np.random.random((4, 5))
    dr = np.dot(a, b.T)
    */
    TEST(xtest_extended, dot_broadcast)
    {
        // py_a
        // py_b
        // py_dr

        xt::xtensor<double, 2> bas = xt::transpose(py_b);

        auto xres = xt::linalg::dot(py_a, xt::transpose(py_b));
        auto xres2 = xt::linalg::dot(py_a, bas);
        std::cout << xres << std::endl;
        EXPECT_TRUE(xt::allclose(xres, py_dr));
        EXPECT_TRUE(xt::allclose(xres2, py_dr));
    }

    /*py
    a = np.random.random((2, 3, 5))
    b = np.random.random((5))
    dr = np.dot(a, b)
    */
    TEST(xtest_extended, dot_broadcast_2)
    {
        // py_a
        // py_b
        // py_dr

        auto xres = xt::linalg::dot(py_a, py_b);
        std::cout << xres << std::endl;
        EXPECT_TRUE(xt::allclose(xres, py_dr));
    }
    /*py
    a = np.arange(2 * 3 * 4 * 5).reshape(2, 3, 4, 5)
    b = np.arange(4 * 5 * 3).reshape(4, 5, 3)
    dr = np.dot(a, b)
    */
    TEST(xtest_extended, dot_broadcast_3)
    {
        // py_a
        // py_b
        // py_dr

        auto xres = xt::linalg::dot(py_a, py_b);
        EXPECT_TRUE(xt::allclose(xres, py_dr));
    }
}
