/***************************************************************************
* Copyright (c) Wolf Vollprecht, Johan Mabille and Sylvain Corlay          *
* Copyright (c) QuantStack                                                 *
*                                                                          *
* Distributed under the terms of the BSD 3-Clause License.                 *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/

#include <algorithm>

#include "gtest/gtest.h"
#include "xtensor/containers/xarray.hpp"
#include "xtensor/containers/xfixed.hpp"
#include "xtensor/core/xnoalias.hpp"
#include "xtensor/views/xstrided_view.hpp"
#include "xtensor/containers/xtensor.hpp"
#include "xtensor/views/xview.hpp"

#include "xtensor-blas/xlinalg.hpp"

namespace xt
{
    using namespace xt::placeholders;

    /*py
    a = np.random.random((6, 3))
    res_q1 = np.linalg.qr(a, 'raw')
    res_q2 = np.linalg.qr(a, 'complete')
    res_q3 = np.linalg.qr(a, 'reduced')
    res_q4 = np.linalg.qr(a, 'r')
    */
    TEST(xtest_extended, qr1)
    {
        // py_a
        // py_resq1_h = res_q1[0]
        // py_resq1_tau = res_q1[1]

        auto res1 = linalg::qr(py_a, linalg::qrmode::raw);
        EXPECT_TRUE(allclose(std::get<0>(res1), py_resq1_h));
        EXPECT_TRUE(allclose(std::get<1>(res1), py_resq1_tau));

        // py_resq2_q_cmpl = res_q2[0]
        // py_resq2_r_cmpl = res_q2[1]

        auto res2 = linalg::qr(py_a, linalg::qrmode::complete);
        EXPECT_TRUE(allclose(std::get<0>(res2), py_resq2_q_cmpl));
        EXPECT_TRUE(allclose(std::get<1>(res2), py_resq2_r_cmpl));

        // py_resq3_q_cmpl = res_q3[0]
        // py_resq3_r_cmpl = res_q3[1]

        auto res3 = linalg::qr(py_a, linalg::qrmode::reduced);
        EXPECT_TRUE(allclose(std::get<0>(res3), py_resq3_q_cmpl));
        EXPECT_TRUE(allclose(std::get<1>(res3), py_resq3_r_cmpl));

        // py_resq4_r_r = res_q4

        auto res4 = linalg::qr(py_a, linalg::qrmode::r);
        EXPECT_TRUE(allclose(std::get<1>(res4), py_resq4_r_r));
    }

    /*py
    a = np.random.random((5, 10))
    res_q1 = np.linalg.qr(a, 'raw')
    res_q2 = np.linalg.qr(a, 'complete')
    res_q3 = np.linalg.qr(a, 'reduced')
    res_q4 = np.linalg.qr(a, 'r')
    */
    TEST(xtest_extended, qr2)
    {
        // py_a
        // py_resq1_h = res_q1[0]
        // py_resq1_tau = res_q1[1]

        auto res1 = linalg::qr(py_a, linalg::qrmode::raw);
        EXPECT_TRUE(allclose(std::get<0>(res1), py_resq1_h));
        EXPECT_TRUE(allclose(std::get<1>(res1), py_resq1_tau));
        // py_resq2_q_cmpl = res_q2[0]
        // py_resq2_r_cmpl = res_q2[1]

        auto res2 = linalg::qr(py_a, linalg::qrmode::complete);
        EXPECT_TRUE(allclose(std::get<0>(res2), py_resq2_q_cmpl));
        EXPECT_TRUE(allclose(std::get<1>(res2), py_resq2_r_cmpl));

        // py_resq3_q_cmpl = res_q3[0]
        // py_resq3_r_cmpl = res_q3[1]

        auto res3 = linalg::qr(py_a, linalg::qrmode::reduced);
        EXPECT_TRUE(allclose(std::get<0>(res3), py_resq3_q_cmpl));
        EXPECT_TRUE(allclose(std::get<1>(res3), py_resq3_r_cmpl));

        // py_resq4_r_r = res_q4

        auto res4 = linalg::qr(py_a, linalg::qrmode::r);
        EXPECT_TRUE(allclose(std::get<1>(res4), py_resq4_r_r));

    }
}
