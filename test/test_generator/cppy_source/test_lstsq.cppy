/***************************************************************************
* Copyright (c) Wolf Vollprecht, Johan Mabille and Sylvain Corlay          *
* Copyright (c) QuantStack                                                 *
*                                                                          *
* Distributed under the terms of the BSD 3-Clause License.                 *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/

#include <algorithm>

#include "gtest/gtest.h"
#include "xtensor/containers/xarray.hpp"
#include "xtensor/containers/xfixed.hpp"
#include "xtensor/core/xnoalias.hpp"
#include "xtensor/views/xstrided_view.hpp"
#include "xtensor/containers/xtensor.hpp"
#include "xtensor/views/xview.hpp"

#include "xtensor-blas/xlinalg.hpp"

namespace xt
{
    using namespace xt::placeholders;

    /*py
    a = np.random.random((6, 3))
    b = np.ones((6))
    */
    TEST(xtest_extended, lstsq1)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.random.random((3, 3))
    b = np.ones((3))
    */
    TEST(xtest_extended, lstsq20)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);

        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.random.random((3, 3))
    b = np.ones((3, 3))
    */
    TEST(xtest_extended, lstsq21)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);

        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.random.random((2, 5))
    b = np.ones((2))
    */
    TEST(xtest_extended, lstsq3)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.random.random((2, 5))
    b = np.ones((2, 10))
    */
    TEST(xtest_extended, lstsq4)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.random.random((10, 5))
    b = np.ones((10, 20))
    */
    TEST(xtest_extended, lstsq5)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.array([[0., 1.]])
    b = np.array([1.])
    */
    TEST(xtest_extended, lstsq6)
    {
        // py_a
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }

    /*py
    a = np.array([[1.], [1.]])
    b = np.array([1., 1.])
    */
    TEST(xtest_extended, lstsq7)
    {
        // cannot use "// py_a" due to ambiguous initializer list conversion below
        // xarray<double> py_a = {{1.},
        //                        {1.}};
        xarray<double> py_a = xt::ones<double>({2, 1});
        // py_b
        // py_res0 = np.linalg.lstsq(a, b)[0]
        // py_res1 = np.linalg.lstsq(a, b)[1]
        // py_res2 = np.linalg.lstsq(a, b)[2]
        // py_res3 = np.linalg.lstsq(a, b)[3]

        auto xres = xt::linalg::lstsq(py_a, py_b);
        EXPECT_TRUE(xt::allclose(std::get<0>(xres), py_res0));
        EXPECT_TRUE(xt::allclose(std::get<1>(xres), py_res1));
        EXPECT_EQ(std::get<2>(xres), py_res2);
        EXPECT_TRUE(xt::allclose(std::get<3>(xres), py_res3));
    }


}
